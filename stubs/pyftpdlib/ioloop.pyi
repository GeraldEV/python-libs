import abc
import asynchat
from ._compat import callable as callable
from .log import (
    config_logging as config_logging,
    debug as debug,
    is_logging_configured as is_logging_configured,
    logger as logger,
)
from _typeshed import Incomplete

timer: Incomplete

class RetryError(Exception): ...

class _Scheduler:
    def __init__(self) -> None: ...
    def poll(self): ...
    def register(self, what) -> None: ...
    def unregister(self, what) -> None: ...
    def reheapify(self) -> None: ...

class _CallLater:
    timeout: int
    cancelled: bool
    def __init__(self, seconds, target, *args, **kwargs) -> None: ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def call(self) -> None: ...
    def reset(self) -> None: ...
    def cancel(self) -> None: ...

class _CallEvery(_CallLater): ...

class _IOLoop:
    READ: int
    WRITE: int
    socket_map: Incomplete
    sched: Incomplete
    def __init__(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *args) -> None: ...
    @classmethod
    def instance(cls): ...
    def register(self, fd, instance, events) -> None: ...
    def unregister(self, fd) -> None: ...
    def modify(self, fd, events) -> None: ...
    def poll(self, timeout) -> None: ...
    def loop(self, timeout: Incomplete | None = ..., blocking: bool = ...): ...
    def call_later(self, seconds, target, *args, **kwargs): ...
    def call_every(self, seconds, target, *args, **kwargs): ...
    def close(self): ...

class Select(_IOLoop):
    def __init__(self) -> None: ...
    def register(self, fd, instance, events) -> None: ...
    def unregister(self, fd) -> None: ...
    def modify(self, fd, events) -> None: ...
    def poll(self, timeout) -> None: ...

class _BasePollEpoll(_IOLoop):
    def __init__(self) -> None: ...
    def register(self, fd, instance, events) -> None: ...
    def unregister(self, fd) -> None: ...
    def modify(self, fd, events) -> None: ...
    def poll(self, timeout) -> None: ...

class Poll(_BasePollEpoll):
    READ: Incomplete
    WRITE: Incomplete
    def modify(self, fd, events) -> None: ...
    def poll(self, timeout) -> None: ...

class DevPoll(_BasePollEpoll):
    READ: Incomplete
    WRITE: Incomplete
    def fileno(self): ...
    def modify(self, fd, events) -> None: ...
    def poll(self, timeout) -> None: ...
    def close(self) -> None: ...

class Epoll(_BasePollEpoll):
    READ: Incomplete
    WRITE: Incomplete
    def fileno(self): ...
    def close(self) -> None: ...

class Kqueue(_IOLoop):
    def __init__(self) -> None: ...
    def fileno(self): ...
    def close(self) -> None: ...
    def register(self, fd, instance, events) -> None: ...
    def unregister(self, fd) -> None: ...
    def modify(self, fd, events) -> None: ...
    def poll(self, timeout, _len=..., _READ=..., _WRITE=..., _EOF=..., _ERROR=...) -> None: ...

IOLoop = Epoll
IOLoop = Kqueue  # type: ignore
IOLoop = DevPoll  # type: ignore
IOLoop = Poll  # type: ignore
IOLoop = Select  # type: ignore

class AsyncChat(asynchat.async_chat, metaclass=abc.ABCMeta):
    ioloop: Incomplete
    def __init__(self, sock: Incomplete | None = ..., ioloop: Incomplete | None = ...) -> None: ...
    def add_channel(
        self, map: Incomplete | None = ..., events: Incomplete | None = ...
    ) -> None: ...
    def del_channel(self, map: Incomplete | None = ...) -> None: ...
    def modify_ioloop_events(self, events, logdebug: bool = ...) -> None: ...
    def call_later(self, seconds, target, *args, **kwargs): ...
    def connect(self, addr) -> None: ...
    socket: Incomplete
    def connect_af_unspecified(self, addr, source_address: Incomplete | None = ...): ...
    def send(self, data): ...
    def recv(self, buffer_size): ...
    def handle_read(self) -> None: ...
    def initiate_send(self) -> None: ...
    def close_when_done(self) -> None: ...
    connected: bool
    def close(self) -> None: ...

class Connector(AsyncChat, metaclass=abc.ABCMeta):
    def add_channel(
        self, map: Incomplete | None = ..., events: Incomplete | None = ...
    ) -> None: ...

class Acceptor(AsyncChat, metaclass=abc.ABCMeta):
    def add_channel(
        self, map: Incomplete | None = ..., events: Incomplete | None = ...
    ) -> None: ...
    socket: Incomplete
    def bind_af_unspecified(self, addr): ...
    def listen(self, num) -> None: ...
    def handle_accept(self) -> None: ...
    def handle_accepted(self, sock, addr) -> None: ...
    def set_reuse_addr(self) -> None: ...
