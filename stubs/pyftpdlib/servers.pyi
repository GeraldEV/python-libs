import abc
from .ioloop import Acceptor
from _typeshed import Incomplete

class FTPServer(Acceptor, metaclass=abc.ABCMeta):
    max_cons: int
    max_cons_per_ip: int
    handler: Incomplete
    backlog: Incomplete
    ip_map: Incomplete
    def __init__(
        self, address_or_socket, handler, ioloop: Incomplete | None = ..., backlog: int = ...
    ) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *args) -> None: ...
    @property
    def address(self): ...
    def serve_forever(
        self,
        timeout: Incomplete | None = ...,
        blocking: bool = ...,
        handle_exit: bool = ...,
        worker_processes: int = ...,
    ) -> None: ...
    def handle_accepted(self, sock, addr): ...
    def handle_error(self) -> None: ...
    def close_all(self): ...

class _SpawnerBase(FTPServer, metaclass=abc.ABCMeta):
    join_timeout: int
    refresh_interval: int
    def __init__(
        self, address_or_socket, handler, ioloop: Incomplete | None = ..., backlog: int = ...
    ) -> None: ...
    def handle_accepted(self, sock, addr) -> None: ...
    # def serve_forever(self, timeout: float = ..., blocking: bool = ..., handle_exit: bool = ...) -> None: ...
    def close_all(self) -> None: ...

class ThreadedFTPServer(_SpawnerBase, metaclass=abc.ABCMeta):
    poll_timeout: float

class MultiprocessFTPServer(_SpawnerBase, metaclass=abc.ABCMeta): ...
